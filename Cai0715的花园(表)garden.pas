program garden;
var  zt:array[0..9,0..9,0..9,0..9]of longint;
  tt,t1,t2,t3,t4,i,j,k,n,m,z,ans:longint;
begin
assign(input,'garden.in');reset(input);
assign(output,'garden.out');rewrite(output);
fillchar(zt,sizeof(zt),63);
zt[0,0,0,0]:=0;
zt[1,0,0,0]:=1;
zt[1,1,0,0]:=2;
zt[1,1,1,0]:=4;
zt[1,1,2,0]:=5;
zt[1,2,0,0]:=3;
zt[1,2,1,0]:=5;
zt[1,2,1,1]:=6;
zt[1,2,1,2]:=9;
zt[1,2,2,0]:=6;
zt[1,2,2,1]:=7;
zt[1,2,2,2]:=9;
zt[1,2,2,4]:=13;
zt[1,2,3,0]:=7;
zt[1,2,3,1]:=9;
zt[1,2,3,2]:=10;
zt[1,2,3,3]:=13;
zt[1,2,4,0]:=9;
zt[1,2,4,1]:=10;
zt[1,2,4,2]:=12;
zt[1,2,5,0]:=10;
zt[1,2,5,1]:=12;
zt[1,2,6,0]:=12;
zt[1,3,0,0]:=4;
zt[1,3,0,1]:=9;
zt[1,3,1,0]:=6;
zt[1,3,1,1]:=7;
zt[1,3,1,2]:=10;
zt[1,3,1,3]:=13;
zt[1,3,1,4]:=15;
zt[1,3,2,0]:=7;
zt[1,3,2,1]:=8;
zt[1,3,2,2]:=10;
zt[1,3,2,3]:=12;
zt[1,3,3,0]:=8;
zt[1,3,3,1]:=10;
zt[1,3,3,2]:=11;
zt[1,3,4,0]:=10;
zt[1,3,4,1]:=11;
zt[1,3,5,0]:=11;
zt[1,4,0,0]:=5;
zt[1,4,0,1]:=10;
zt[1,4,0,2]:=13;
zt[1,4,1,0]:=7;
zt[1,4,1,1]:=8;
zt[1,4,1,2]:=11;
zt[1,4,1,3]:=13;
zt[1,4,2,0]:=8;
zt[1,4,2,1]:=10;
zt[1,4,2,2]:=11;
zt[1,4,3,0]:=10;
zt[1,4,3,1]:=11;
zt[1,4,4,0]:=11;
zt[1,5,0,0]:=7;
zt[1,5,0,1]:=11;
zt[1,5,0,2]:=14;
zt[1,5,0,3]:=16;
zt[1,5,1,0]:=8;
zt[1,5,1,1]:=10;
zt[1,5,1,2]:=12;
zt[1,5,2,0]:=10;
zt[1,5,2,1]:=11;
zt[1,5,3,0]:=11;
zt[1,6,0,0]:=8;
zt[1,6,0,1]:=12;
zt[1,6,0,2]:=14;
zt[1,6,1,0]:=10;
zt[1,6,1,1]:=11;
zt[1,6,2,0]:=11;
zt[1,7,0,0]:=10;
zt[1,7,0,1]:=13;
zt[1,7,1,0]:=11;
zt[1,8,0,0]:=11;
zt[2,0,0,0]:=2;
zt[2,0,1,0]:=5;
zt[2,0,2,0]:=6;
zt[2,1,0,0]:=3;
zt[2,1,1,0]:=4;
zt[2,1,1,1]:=6;
zt[2,1,1,2]:=8;
zt[2,1,2,0]:=5;
zt[2,1,2,1]:=7;
zt[2,1,2,2]:=9;
zt[2,1,2,4]:=13;
zt[2,1,3,0]:=7;
zt[2,1,3,1]:=9;
zt[2,1,3,2]:=10;
zt[2,1,3,3]:=13;
zt[2,1,4,0]:=8;
zt[2,1,4,1]:=10;
zt[2,1,4,2]:=13;
zt[2,1,5,0]:=10;
zt[2,1,5,1]:=13;
zt[2,1,6,0]:=13;
zt[2,2,0,0]:=4;
zt[2,2,0,1]:=7;
zt[2,2,0,2]:=10;
zt[2,2,1,0]:=5;
zt[2,2,1,1]:=6;
zt[2,2,1,2]:=8;
zt[2,2,1,3]:=11;
zt[2,2,1,4]:=12;
zt[2,2,2,0]:=6;
zt[2,2,2,1]:=8;
zt[2,2,2,2]:=10;
zt[2,2,2,3]:=12;
zt[2,2,3,0]:=8;
zt[2,2,3,1]:=9;
zt[2,2,3,2]:=11;
zt[2,2,4,0]:=9;
zt[2,2,4,1]:=11;
zt[2,2,5,0]:=10;
zt[2,3,0,0]:=5;
zt[2,3,0,1]:=7;
zt[2,3,0,2]:=10;
zt[2,3,0,3]:=14;
zt[2,3,0,4]:=16;
zt[2,3,1,0]:=6;
zt[2,3,1,1]:=7;
zt[2,3,1,2]:=9;
zt[2,3,1,3]:=11;
zt[2,3,2,0]:=7;
zt[2,3,2,1]:=9;
zt[2,3,2,2]:=11;
zt[2,3,3,0]:=9;
zt[2,3,3,1]:=10;
zt[2,3,4,0]:=10;
zt[2,4,0,0]:=6;
zt[2,4,0,1]:=8;
zt[2,4,0,2]:=11;
zt[2,4,0,3]:=13;
zt[2,4,1,0]:=7;
zt[2,4,1,1]:=9;
zt[2,4,1,2]:=11;
zt[2,4,2,0]:=9;
zt[2,4,2,1]:=10;
zt[2,4,3,0]:=10;
zt[2,5,0,0]:=7;
zt[2,5,0,1]:=10;
zt[2,5,0,2]:=12;
zt[2,5,1,0]:=9;
zt[2,5,1,1]:=10;
zt[2,5,2,0]:=10;
zt[2,6,0,0]:=9;
zt[2,6,0,1]:=12;
zt[2,6,1,0]:=10;
zt[2,7,0,0]:=10;
zt[3,0,0,0]:=3;
zt[3,0,1,0]:=5;
zt[3,0,1,1]:=7;
zt[3,0,1,2]:=9;
zt[3,0,2,0]:=6;
zt[3,0,2,1]:=8;
zt[3,0,2,2]:=10;
zt[3,0,2,4]:=14;
zt[3,0,3,0]:=8;
zt[3,0,3,1]:=10;
zt[3,0,3,2]:=11;
zt[3,0,3,3]:=14;
zt[3,0,4,0]:=9;
zt[3,0,4,1]:=11;
zt[3,0,4,2]:=14;
zt[3,0,5,0]:=11;
zt[3,0,5,1]:=14;
zt[3,0,6,0]:=14;
zt[3,1,0,0]:=4;
zt[3,1,0,1]:=7;
zt[3,1,0,2]:=9;
zt[3,1,1,0]:=5;
zt[3,1,1,1]:=7;
zt[3,1,1,2]:=9;
zt[3,1,1,3]:=11;
zt[3,1,1,4]:=13;
zt[3,1,2,0]:=6;
zt[3,1,2,1]:=8;
zt[3,1,2,2]:=10;
zt[3,1,2,3]:=12;
zt[3,1,3,0]:=7;
zt[3,1,3,1]:=9;
zt[3,1,3,2]:=11;
zt[3,1,4,0]:=9;
zt[3,1,4,1]:=11;
zt[3,1,5,0]:=11;
zt[3,2,0,0]:=5;
zt[3,2,0,1]:=7;
zt[3,2,0,2]:=9;
zt[3,2,0,3]:=12;
zt[3,2,0,4]:=13;
zt[3,2,1,0]:=6;
zt[3,2,1,1]:=7;
zt[3,2,1,2]:=9;
zt[3,2,1,3]:=11;
zt[3,2,2,0]:=7;
zt[3,2,2,1]:=8;
zt[3,2,2,2]:=10;
zt[3,2,3,0]:=8;
zt[3,2,3,1]:=10;
zt[3,2,4,0]:=9;
zt[3,3,0,0]:=6;
zt[3,3,0,1]:=8;
zt[3,3,0,2]:=10;
zt[3,3,0,3]:=12;
zt[3,3,1,0]:=7;
zt[3,3,1,1]:=8;
zt[3,3,1,2]:=9;
zt[3,3,2,0]:=8;
zt[3,3,2,1]:=9;
zt[3,3,3,0]:=9;
zt[3,4,0,0]:=7;
zt[3,4,0,1]:=9;
zt[3,4,0,2]:=10;
zt[3,4,1,0]:=8;
zt[3,4,1,1]:=9;
zt[3,4,2,0]:=9;
zt[3,5,0,0]:=8;
zt[3,5,0,1]:=10;
zt[3,5,1,0]:=9;
zt[3,6,0,0]:=9;
zt[4,0,0,0]:=4;
zt[4,0,0,1]:=8;
zt[4,0,0,2]:=10;
zt[4,0,1,0]:=6;
zt[4,0,1,1]:=8;
zt[4,0,1,2]:=10;
zt[4,0,1,3]:=12;
zt[4,0,1,4]:=14;
zt[4,0,2,0]:=7;
zt[4,0,2,1]:=9;
zt[4,0,2,2]:=11;
zt[4,0,2,3]:=13;
zt[4,0,3,0]:=8;
zt[4,0,3,1]:=10;
zt[4,0,3,2]:=12;
zt[4,0,4,0]:=10;
zt[4,0,4,1]:=12;
zt[4,0,5,0]:=12;
zt[4,1,0,0]:=5;
zt[4,1,0,1]:=8;
zt[4,1,0,2]:=10;
zt[4,1,0,3]:=12;
zt[4,1,0,4]:=14;
zt[4,1,1,0]:=6;
zt[4,1,1,1]:=8;
zt[4,1,1,2]:=10;
zt[4,1,1,3]:=12;
zt[4,1,2,0]:=7;
zt[4,1,2,1]:=9;
zt[4,1,2,2]:=11;
zt[4,1,3,0]:=8;
zt[4,1,3,1]:=10;
zt[4,1,4,0]:=10;
zt[4,2,0,0]:=6;
zt[4,2,0,1]:=8;
zt[4,2,0,2]:=10;
zt[4,2,0,3]:=12;
zt[4,2,1,0]:=7;
zt[4,2,1,1]:=8;
zt[4,2,1,2]:=10;
zt[4,2,2,0]:=8;
zt[4,2,2,1]:=9;
zt[4,2,3,0]:=9;
zt[4,3,0,0]:=7;
zt[4,3,0,1]:=9;
zt[4,3,0,2]:=10;
zt[4,3,1,0]:=8;
zt[4,3,1,1]:=9;
zt[4,3,2,0]:=9;
zt[4,4,0,0]:=8;
zt[4,4,0,1]:=10;
zt[4,4,1,0]:=9;
zt[4,5,0,0]:=9;
zt[5,0,0,0]:=5;
zt[5,0,0,1]:=9;
zt[5,0,0,2]:=11;
zt[5,0,0,3]:=13;
zt[5,0,0,4]:=15;
zt[5,0,1,0]:=7;
zt[5,0,1,1]:=9;
zt[5,0,1,2]:=11;
zt[5,0,1,3]:=13;
zt[5,0,2,0]:=8;
zt[5,0,2,1]:=10;
zt[5,0,2,2]:=12;
zt[5,0,3,0]:=9;
zt[5,0,3,1]:=11;
zt[5,0,4,0]:=11;
zt[5,1,0,0]:=6;
zt[5,1,0,1]:=9;
zt[5,1,0,2]:=11;
zt[5,1,0,3]:=13;
zt[5,1,1,0]:=7;
zt[5,1,1,1]:=9;
zt[5,1,1,2]:=11;
zt[5,1,2,0]:=8;
zt[5,1,2,1]:=10;
zt[5,1,3,0]:=9;
zt[5,2,0,0]:=7;
zt[5,2,0,1]:=9;
zt[5,2,0,2]:=11;
zt[5,2,1,0]:=8;
zt[5,2,1,1]:=9;
zt[5,2,2,0]:=9;
zt[5,3,0,0]:=8;
zt[5,3,0,1]:=10;
zt[5,3,1,0]:=9;
zt[5,4,0,0]:=9;
zt[6,0,0,0]:=6;
zt[6,0,0,1]:=10;
zt[6,0,0,2]:=12;
zt[6,0,0,3]:=14;
zt[6,0,1,0]:=8;
zt[6,0,1,1]:=10;
zt[6,0,1,2]:=12;
zt[6,0,2,0]:=9;
zt[6,0,2,1]:=11;
zt[6,0,3,0]:=10;
zt[6,1,0,0]:=7;
zt[6,1,0,1]:=10;
zt[6,1,0,2]:=12;
zt[6,1,1,0]:=8;
zt[6,1,1,1]:=10;
zt[6,1,2,0]:=9;
zt[6,2,0,0]:=8;
zt[6,2,0,1]:=10;
zt[6,2,1,0]:=9;
zt[6,3,0,0]:=9;
zt[7,0,0,0]:=7;
zt[7,0,0,1]:=11;
zt[7,0,0,2]:=13;
zt[7,0,1,0]:=9;
zt[7,0,1,1]:=11;
zt[7,0,2,0]:=10;
zt[7,1,0,0]:=8;
zt[7,1,0,1]:=11;
zt[7,1,1,0]:=9;
zt[7,2,0,0]:=9;
zt[8,0,0,0]:=8;
zt[8,0,0,1]:=12;
zt[8,0,1,0]:=10;
zt[8,1,0,0]:=9;
zt[9,0,0,0]:=9;
readln(n);
for tt:=1 to n do
 begin
 readln(t1,t2,t3,t4,m);
 ans:=maxlongint;
  for i:=0 to 9 do
  for j:=0 to 9 do
  for k:=0 to 9 do
  for z:=0 to 9 do
  if (ans>zt[i,j,k,z])and(i*t1+t2*j+t3*k+t4*z>=m)then
    ans:=zt[i,j,k,z];
if ans<100 then
  writeln(ans)
  else writeln('Impossible');
 end;
 close(output);
end.